/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkUpkeep"
      | "enterLottery"
      | "i_interval"
      | "performUpkeep"
      | "rawFulfillRandomWords"
      | "s_lastTimeStamp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EntrySuccessful"
      | "RequestFulfilled"
      | "RequestSent"
      | "WinnerFound"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterLottery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "i_interval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastTimeStamp",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "i_interval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastTimeStamp",
    data: BytesLike
  ): Result;
}

export namespace EntrySuccessfulEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [requestId: BigNumberish, words: BigNumberish[]];
  export type OutputTuple = [requestId: bigint, words: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    words: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [requestId: BigNumberish, numWords: BigNumberish];
  export type OutputTuple = [requestId: bigint, numWords: bigint];
  export interface OutputObject {
    requestId: bigint;
    numWords: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerFoundEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  enterLottery: TypedContractMethod<[], [void], "payable">;

  i_interval: TypedContractMethod<[], [bigint], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  s_lastTimeStamp: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "enterLottery"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "i_interval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "s_lastTimeStamp"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "EntrySuccessful"
  ): TypedContractEvent<
    EntrySuccessfulEvent.InputTuple,
    EntrySuccessfulEvent.OutputTuple,
    EntrySuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "WinnerFound"
  ): TypedContractEvent<
    WinnerFoundEvent.InputTuple,
    WinnerFoundEvent.OutputTuple,
    WinnerFoundEvent.OutputObject
  >;

  filters: {
    "EntrySuccessful(address)": TypedContractEvent<
      EntrySuccessfulEvent.InputTuple,
      EntrySuccessfulEvent.OutputTuple,
      EntrySuccessfulEvent.OutputObject
    >;
    EntrySuccessful: TypedContractEvent<
      EntrySuccessfulEvent.InputTuple,
      EntrySuccessfulEvent.OutputTuple,
      EntrySuccessfulEvent.OutputObject
    >;

    "RequestFulfilled(uint256,uint256[])": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(uint256,uint256)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "WinnerFound(address)": TypedContractEvent<
      WinnerFoundEvent.InputTuple,
      WinnerFoundEvent.OutputTuple,
      WinnerFoundEvent.OutputObject
    >;
    WinnerFound: TypedContractEvent<
      WinnerFoundEvent.InputTuple,
      WinnerFoundEvent.OutputTuple,
      WinnerFoundEvent.OutputObject
    >;
  };
}
